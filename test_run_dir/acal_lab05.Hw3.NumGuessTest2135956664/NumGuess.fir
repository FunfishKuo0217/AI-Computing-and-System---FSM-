circuit NumGuess :
  module PRNG :
    input clock : Clock
    input reset : Reset
    output io : { flip gen : UInt<1>, puzzle : UInt<4>[4], ready : UInt<1>}

    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[PRNG.scala 24:24]
    wire _WIRE : UInt<1>[16] @[PRNG.scala 27:35]
    _WIRE[0] <= UInt<1>("h1") @[PRNG.scala 27:35]
    _WIRE[1] <= UInt<1>("h1") @[PRNG.scala 27:35]
    _WIRE[2] <= UInt<1>("h1") @[PRNG.scala 27:35]
    _WIRE[3] <= UInt<1>("h1") @[PRNG.scala 27:35]
    _WIRE[4] <= UInt<1>("h1") @[PRNG.scala 27:35]
    _WIRE[5] <= UInt<1>("h1") @[PRNG.scala 27:35]
    _WIRE[6] <= UInt<1>("h1") @[PRNG.scala 27:35]
    _WIRE[7] <= UInt<1>("h1") @[PRNG.scala 27:35]
    _WIRE[8] <= UInt<1>("h1") @[PRNG.scala 27:35]
    _WIRE[9] <= UInt<1>("h1") @[PRNG.scala 27:35]
    _WIRE[10] <= UInt<1>("h1") @[PRNG.scala 27:35]
    _WIRE[11] <= UInt<1>("h1") @[PRNG.scala 27:35]
    _WIRE[12] <= UInt<1>("h1") @[PRNG.scala 27:35]
    _WIRE[13] <= UInt<1>("h1") @[PRNG.scala 27:35]
    _WIRE[14] <= UInt<1>("h1") @[PRNG.scala 27:35]
    _WIRE[15] <= UInt<1>("h1") @[PRNG.scala 27:35]
    reg shiftReg : UInt<1>[16], clock with :
      reset => (reset, _WIRE) @[PRNG.scala 27:27]
    wire _WIRE_1 : UInt<4>[4] @[PRNG.scala 28:33]
    _WIRE_1[0] <= UInt<4>("h0") @[PRNG.scala 28:33]
    _WIRE_1[1] <= UInt<4>("h0") @[PRNG.scala 28:33]
    _WIRE_1[2] <= UInt<4>("h0") @[PRNG.scala 28:33]
    _WIRE_1[3] <= UInt<4>("h0") @[PRNG.scala 28:33]
    reg regAns : UInt<4>[4], clock with :
      reset => (reset, _WIRE_1) @[PRNG.scala 28:25]
    wire _WIRE_2 : UInt<1>[6] @[PRNG.scala 29:33]
    _WIRE_2[0] <= UInt<1>("h1") @[PRNG.scala 29:33]
    _WIRE_2[1] <= UInt<1>("h1") @[PRNG.scala 29:33]
    _WIRE_2[2] <= UInt<1>("h1") @[PRNG.scala 29:33]
    _WIRE_2[3] <= UInt<1>("h1") @[PRNG.scala 29:33]
    _WIRE_2[4] <= UInt<1>("h1") @[PRNG.scala 29:33]
    _WIRE_2[5] <= UInt<1>("h1") @[PRNG.scala 29:33]
    reg regDup : UInt<1>[6], clock with :
      reset => (reset, _WIRE_2) @[PRNG.scala 29:25]
    reg goToRangeMap : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[PRNG.scala 31:31]
    reg goToCheckDup : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[PRNG.scala 32:31]
    reg goToValidateDup : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[PRNG.scala 33:34]
    reg goToOutput : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[PRNG.scala 34:29]
    reg goToReGen : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[PRNG.scala 35:28]
    node _T = eq(UInt<3>("h0"), state) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      state <= UInt<3>("h1") @[PRNG.scala 39:26]
    else :
      node _T_1 = eq(UInt<3>("h1"), state) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        state <= UInt<3>("h5") @[PRNG.scala 40:26]
      else :
        node _T_2 = eq(UInt<3>("h5"), state) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          node _T_3 = eq(goToRangeMap, UInt<1>("h1")) @[PRNG.scala 41:38]
          when _T_3 : @[PRNG.scala 41:49]
            state <= UInt<3>("h2") @[PRNG.scala 41:57]
        else :
          node _T_4 = eq(UInt<3>("h2"), state) @[Conditional.scala 37:30]
          when _T_4 : @[Conditional.scala 39:67]
            node _T_5 = eq(goToCheckDup, UInt<1>("h1")) @[PRNG.scala 42:43]
            when _T_5 : @[PRNG.scala 42:54]
              state <= UInt<3>("h3") @[PRNG.scala 42:62]
          else :
            node _T_6 = eq(UInt<3>("h3"), state) @[Conditional.scala 37:30]
            when _T_6 : @[Conditional.scala 39:67]
              node _T_7 = eq(goToValidateDup, UInt<1>("h1")) @[PRNG.scala 43:45]
              when _T_7 : @[PRNG.scala 43:56]
                state <= UInt<3>("h4") @[PRNG.scala 43:64]
            else :
              node _T_8 = eq(UInt<3>("h4"), state) @[Conditional.scala 37:30]
              when _T_8 : @[Conditional.scala 39:67]
                node _T_9 = eq(goToReGen, UInt<1>("h1")) @[PRNG.scala 45:28]
                when _T_9 : @[PRNG.scala 45:39]
                  state <= UInt<3>("h1") @[PRNG.scala 45:47]
                else :
                  node _T_10 = eq(goToOutput, UInt<1>("h1")) @[PRNG.scala 46:34]
                  when _T_10 : @[PRNG.scala 46:45]
                    state <= UInt<3>("h6") @[PRNG.scala 46:53]
              else :
                node _T_11 = eq(UInt<3>("h6"), state) @[Conditional.scala 37:30]
                when _T_11 : @[Conditional.scala 39:67]
                  node _T_12 = eq(io.gen, UInt<1>("h1")) @[PRNG.scala 48:34]
                  when _T_12 : @[PRNG.scala 48:45]
                    state <= UInt<3>("h0") @[PRNG.scala 48:53]
    io.ready <= UInt<1>("h0") @[PRNG.scala 52:14]
    wire _WIRE_3 : UInt<4>[4] @[PRNG.scala 53:25]
    _WIRE_3[0] <= UInt<4>("h0") @[PRNG.scala 53:25]
    _WIRE_3[1] <= UInt<4>("h0") @[PRNG.scala 53:25]
    _WIRE_3[2] <= UInt<4>("h0") @[PRNG.scala 53:25]
    _WIRE_3[3] <= UInt<4>("h0") @[PRNG.scala 53:25]
    io.puzzle[0] <= _WIRE_3[0] @[PRNG.scala 53:15]
    io.puzzle[1] <= _WIRE_3[1] @[PRNG.scala 53:15]
    io.puzzle[2] <= _WIRE_3[2] @[PRNG.scala 53:15]
    io.puzzle[3] <= _WIRE_3[3] @[PRNG.scala 53:15]
    node _T_13 = eq(state, UInt<3>("h1")) @[PRNG.scala 56:16]
    when _T_13 : @[PRNG.scala 56:26]
      goToReGen <= UInt<1>("h0") @[PRNG.scala 57:19]
      goToOutput <= UInt<1>("h0") @[PRNG.scala 58:20]
      shiftReg[0] <= shiftReg[1] @[PRNG.scala 59:54]
      shiftReg[1] <= shiftReg[2] @[PRNG.scala 59:54]
      shiftReg[2] <= shiftReg[3] @[PRNG.scala 59:54]
      shiftReg[3] <= shiftReg[4] @[PRNG.scala 59:54]
      shiftReg[4] <= shiftReg[5] @[PRNG.scala 59:54]
      shiftReg[5] <= shiftReg[6] @[PRNG.scala 59:54]
      shiftReg[6] <= shiftReg[7] @[PRNG.scala 59:54]
      shiftReg[7] <= shiftReg[8] @[PRNG.scala 59:54]
      shiftReg[8] <= shiftReg[9] @[PRNG.scala 59:54]
      shiftReg[9] <= shiftReg[10] @[PRNG.scala 59:54]
      shiftReg[10] <= shiftReg[11] @[PRNG.scala 59:54]
      shiftReg[11] <= shiftReg[12] @[PRNG.scala 59:54]
      shiftReg[12] <= shiftReg[13] @[PRNG.scala 59:54]
      shiftReg[13] <= shiftReg[14] @[PRNG.scala 59:54]
      shiftReg[14] <= shiftReg[15] @[PRNG.scala 59:54]
      shiftReg[15] <= shiftReg[0] @[PRNG.scala 59:54]
      node _T_14 = xor(shiftReg[15], shiftReg[13]) @[PRNG.scala 61:38]
      node _T_15 = xor(_T_14, shiftReg[12]) @[PRNG.scala 61:52]
      node _T_16 = xor(_T_15, shiftReg[10]) @[PRNG.scala 61:66]
      shiftReg[0] <= _T_16 @[PRNG.scala 61:21]
    node _T_17 = eq(state, UInt<3>("h5")) @[PRNG.scala 63:16]
    when _T_17 : @[PRNG.scala 63:25]
      node lo = cat(shiftReg[1], shiftReg[0]) @[Cat.scala 30:58]
      node hi = cat(shiftReg[3], shiftReg[2]) @[Cat.scala 30:58]
      node _T_18 = cat(hi, lo) @[Cat.scala 30:58]
      regAns[0] <= _T_18 @[PRNG.scala 65:19]
      node lo_1 = cat(shiftReg[5], shiftReg[4]) @[Cat.scala 30:58]
      node hi_1 = cat(shiftReg[7], shiftReg[6]) @[Cat.scala 30:58]
      node _T_19 = cat(hi_1, lo_1) @[Cat.scala 30:58]
      regAns[1] <= _T_19 @[PRNG.scala 66:19]
      node lo_2 = cat(shiftReg[9], shiftReg[8]) @[Cat.scala 30:58]
      node hi_2 = cat(shiftReg[11], shiftReg[10]) @[Cat.scala 30:58]
      node _T_20 = cat(hi_2, lo_2) @[Cat.scala 30:58]
      regAns[2] <= _T_20 @[PRNG.scala 67:19]
      node lo_3 = cat(shiftReg[13], shiftReg[12]) @[Cat.scala 30:58]
      node hi_3 = cat(shiftReg[15], shiftReg[14]) @[Cat.scala 30:58]
      node _T_21 = cat(hi_3, lo_3) @[Cat.scala 30:58]
      regAns[3] <= _T_21 @[PRNG.scala 68:19]
      reg REG : UInt<1>, clock with :
        reset => (UInt<1>("h0"), REG) @[PRNG.scala 69:32]
      REG <= UInt<1>("h1") @[PRNG.scala 69:32]
      goToRangeMap <= REG @[PRNG.scala 69:22]
    node _T_22 = eq(state, UInt<3>("h2")) @[PRNG.scala 71:16]
    when _T_22 : @[PRNG.scala 71:30]
      goToRangeMap <= UInt<1>("h0") @[PRNG.scala 73:22]
      node _T_23 = gt(regAns[0], UInt<4>("h9")) @[PRNG.scala 74:36]
      node _T_24 = sub(regAns[0], UInt<4>("ha")) @[PRNG.scala 74:53]
      node _T_25 = tail(_T_24, 1) @[PRNG.scala 74:53]
      node _T_26 = mux(_T_23, _T_25, regAns[0]) @[PRNG.scala 74:25]
      regAns[0] <= _T_26 @[PRNG.scala 74:19]
      node _T_27 = gt(regAns[1], UInt<4>("h9")) @[PRNG.scala 75:36]
      node _T_28 = sub(regAns[1], UInt<4>("ha")) @[PRNG.scala 75:53]
      node _T_29 = tail(_T_28, 1) @[PRNG.scala 75:53]
      node _T_30 = mux(_T_27, _T_29, regAns[1]) @[PRNG.scala 75:25]
      regAns[1] <= _T_30 @[PRNG.scala 75:19]
      node _T_31 = gt(regAns[2], UInt<4>("h9")) @[PRNG.scala 76:36]
      node _T_32 = sub(regAns[2], UInt<4>("ha")) @[PRNG.scala 76:53]
      node _T_33 = tail(_T_32, 1) @[PRNG.scala 76:53]
      node _T_34 = mux(_T_31, _T_33, regAns[2]) @[PRNG.scala 76:25]
      regAns[2] <= _T_34 @[PRNG.scala 76:19]
      node _T_35 = gt(regAns[3], UInt<4>("h9")) @[PRNG.scala 77:36]
      node _T_36 = sub(regAns[3], UInt<4>("ha")) @[PRNG.scala 77:53]
      node _T_37 = tail(_T_36, 1) @[PRNG.scala 77:53]
      node _T_38 = mux(_T_35, _T_37, regAns[3]) @[PRNG.scala 77:25]
      regAns[3] <= _T_38 @[PRNG.scala 77:19]
      reg REG_1 : UInt<1>, clock with :
        reset => (UInt<1>("h0"), REG_1) @[PRNG.scala 78:32]
      REG_1 <= UInt<1>("h1") @[PRNG.scala 78:32]
      goToCheckDup <= REG_1 @[PRNG.scala 78:22]
    node _T_39 = eq(state, UInt<3>("h3")) @[PRNG.scala 80:16]
    when _T_39 : @[PRNG.scala 80:30]
      goToCheckDup <= UInt<1>("h0") @[PRNG.scala 81:22]
      node _T_40 = eq(regAns[0], regAns[1]) @[PRNG.scala 83:36]
      node _T_41 = mux(_T_40, UInt<1>("h1"), UInt<1>("h0")) @[PRNG.scala 83:25]
      regDup[0] <= _T_41 @[PRNG.scala 83:19]
      node _T_42 = eq(regAns[0], regAns[2]) @[PRNG.scala 84:36]
      node _T_43 = mux(_T_42, UInt<1>("h1"), UInt<1>("h0")) @[PRNG.scala 84:25]
      regDup[1] <= _T_43 @[PRNG.scala 84:19]
      node _T_44 = eq(regAns[0], regAns[3]) @[PRNG.scala 85:36]
      node _T_45 = mux(_T_44, UInt<1>("h1"), UInt<1>("h0")) @[PRNG.scala 85:25]
      regDup[2] <= _T_45 @[PRNG.scala 85:19]
      node _T_46 = eq(regAns[1], regAns[2]) @[PRNG.scala 86:36]
      node _T_47 = mux(_T_46, UInt<1>("h1"), UInt<1>("h0")) @[PRNG.scala 86:25]
      regDup[3] <= _T_47 @[PRNG.scala 86:19]
      node _T_48 = eq(regAns[1], regAns[3]) @[PRNG.scala 87:36]
      node _T_49 = mux(_T_48, UInt<1>("h1"), UInt<1>("h0")) @[PRNG.scala 87:25]
      regDup[4] <= _T_49 @[PRNG.scala 87:19]
      node _T_50 = eq(regAns[2], regAns[3]) @[PRNG.scala 88:36]
      node _T_51 = mux(_T_50, UInt<1>("h1"), UInt<1>("h0")) @[PRNG.scala 88:25]
      regDup[5] <= _T_51 @[PRNG.scala 88:19]
      reg REG_2 : UInt<1>, clock with :
        reset => (UInt<1>("h0"), REG_2) @[PRNG.scala 89:35]
      REG_2 <= UInt<1>("h1") @[PRNG.scala 89:35]
      goToValidateDup <= REG_2 @[PRNG.scala 89:25]
    node _T_52 = eq(state, UInt<3>("h4")) @[PRNG.scala 91:16]
    when _T_52 : @[PRNG.scala 91:28]
      goToValidateDup <= UInt<1>("h0") @[PRNG.scala 92:25]
      node _T_53 = or(regDup[0], regDup[1]) @[PRNG.scala 94:44]
      node _T_54 = or(_T_53, regDup[2]) @[PRNG.scala 94:55]
      node _T_55 = or(_T_54, regDup[3]) @[PRNG.scala 94:66]
      node _T_56 = or(_T_55, regDup[4]) @[PRNG.scala 94:77]
      node _T_57 = or(_T_56, regDup[5]) @[PRNG.scala 94:88]
      node _T_58 = eq(_T_57, UInt<1>("h1")) @[PRNG.scala 94:100]
      node _T_59 = mux(_T_58, UInt<1>("h1"), UInt<1>("h0")) @[PRNG.scala 94:33]
      reg REG_3 : UInt<1>, clock with :
        reset => (UInt<1>("h0"), REG_3) @[PRNG.scala 94:29]
      REG_3 <= _T_59 @[PRNG.scala 94:29]
      goToReGen <= REG_3 @[PRNG.scala 94:19]
      node _T_60 = or(regDup[0], regDup[1]) @[PRNG.scala 96:45]
      node _T_61 = or(_T_60, regDup[2]) @[PRNG.scala 96:56]
      node _T_62 = or(_T_61, regDup[3]) @[PRNG.scala 96:67]
      node _T_63 = or(_T_62, regDup[4]) @[PRNG.scala 96:78]
      node _T_64 = or(_T_63, regDup[5]) @[PRNG.scala 96:89]
      node _T_65 = eq(_T_64, UInt<1>("h0")) @[PRNG.scala 96:101]
      node _T_66 = mux(_T_65, UInt<1>("h1"), UInt<1>("h0")) @[PRNG.scala 96:34]
      reg REG_4 : UInt<1>, clock with :
        reset => (UInt<1>("h0"), REG_4) @[PRNG.scala 96:30]
      REG_4 <= _T_66 @[PRNG.scala 96:30]
      goToOutput <= REG_4 @[PRNG.scala 96:20]
    node _T_67 = eq(state, UInt<3>("h6")) @[PRNG.scala 98:16]
    when _T_67 : @[PRNG.scala 98:28]
      goToOutput <= UInt<1>("h0") @[PRNG.scala 99:20]
      goToReGen <= UInt<1>("h0") @[PRNG.scala 100:19]
      io.puzzle[0] <= regAns[0] @[PRNG.scala 101:22]
      io.puzzle[1] <= regAns[1] @[PRNG.scala 102:22]
      io.puzzle[2] <= regAns[2] @[PRNG.scala 103:22]
      io.puzzle[3] <= regAns[3] @[PRNG.scala 104:22]
      reg REG_5 : UInt<1>, clock with :
        reset => (UInt<1>("h0"), REG_5) @[PRNG.scala 105:28]
      REG_5 <= UInt<1>("h1") @[PRNG.scala 105:28]
      io.ready <= REG_5 @[PRNG.scala 105:18]

  module NumGuess :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip gen : UInt<1>, flip guess : UInt<16>, puzzle : UInt<4>[4], ready : UInt<1>, g_valid : UInt<1>, A : UInt<3>, B : UInt<3>, flip s_valid : UInt<1>}

    reg state : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[NumGuess.scala 24:24]
    inst prng of PRNG @[NumGuess.scala 27:22]
    prng.clock <= clock
    prng.reset <= reset
    wire _WIRE : UInt<4>[4] @[NumGuess.scala 28:31]
    _WIRE[0] <= UInt<4>("h0") @[NumGuess.scala 28:31]
    _WIRE[1] <= UInt<4>("h0") @[NumGuess.scala 28:31]
    _WIRE[2] <= UInt<4>("h0") @[NumGuess.scala 28:31]
    _WIRE[3] <= UInt<4>("h0") @[NumGuess.scala 28:31]
    reg nums : UInt<4>[4], clock with :
      reset => (reset, _WIRE) @[NumGuess.scala 28:23]
    wire _WIRE_1 : UInt<4>[4] @[NumGuess.scala 29:37]
    _WIRE_1[0] <= UInt<4>("h0") @[NumGuess.scala 29:37]
    _WIRE_1[1] <= UInt<4>("h0") @[NumGuess.scala 29:37]
    _WIRE_1[2] <= UInt<4>("h0") @[NumGuess.scala 29:37]
    _WIRE_1[3] <= UInt<4>("h0") @[NumGuess.scala 29:37]
    reg puzzleNums : UInt<4>[4], clock with :
      reset => (reset, _WIRE_1) @[NumGuess.scala 29:29]
    reg cntA : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[NumGuess.scala 30:23]
    reg cntB : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[NumGuess.scala 31:23]
    wire _WIRE_2 : UInt<3>[4] @[NumGuess.scala 32:37]
    _WIRE_2[0] <= UInt<3>("h0") @[NumGuess.scala 32:37]
    _WIRE_2[1] <= UInt<3>("h0") @[NumGuess.scala 32:37]
    _WIRE_2[2] <= UInt<3>("h0") @[NumGuess.scala 32:37]
    _WIRE_2[3] <= UInt<3>("h0") @[NumGuess.scala 32:37]
    reg regVerifyA : UInt<3>[4], clock with :
      reset => (reset, _WIRE_2) @[NumGuess.scala 32:29]
    wire _WIRE_3 : UInt<3>[12] @[NumGuess.scala 33:37]
    _WIRE_3[0] <= UInt<3>("h0") @[NumGuess.scala 33:37]
    _WIRE_3[1] <= UInt<3>("h0") @[NumGuess.scala 33:37]
    _WIRE_3[2] <= UInt<3>("h0") @[NumGuess.scala 33:37]
    _WIRE_3[3] <= UInt<3>("h0") @[NumGuess.scala 33:37]
    _WIRE_3[4] <= UInt<3>("h0") @[NumGuess.scala 33:37]
    _WIRE_3[5] <= UInt<3>("h0") @[NumGuess.scala 33:37]
    _WIRE_3[6] <= UInt<3>("h0") @[NumGuess.scala 33:37]
    _WIRE_3[7] <= UInt<3>("h0") @[NumGuess.scala 33:37]
    _WIRE_3[8] <= UInt<3>("h0") @[NumGuess.scala 33:37]
    _WIRE_3[9] <= UInt<3>("h0") @[NumGuess.scala 33:37]
    _WIRE_3[10] <= UInt<3>("h0") @[NumGuess.scala 33:37]
    _WIRE_3[11] <= UInt<3>("h0") @[NumGuess.scala 33:37]
    reg regVerifyB : UInt<3>[12], clock with :
      reset => (reset, _WIRE_3) @[NumGuess.scala 33:29]
    reg regGoWait : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[NumGuess.scala 35:28]
    reg regGoVerifierA : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[NumGuess.scala 36:33]
    reg regGoVerifierB : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[NumGuess.scala 37:33]
    reg regGoAnsCal : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[NumGuess.scala 38:30]
    reg regGoOutput : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[NumGuess.scala 39:30]
    reg regGoReset : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[NumGuess.scala 40:29]
    io.puzzle[0] <= UInt<4>("h0") @[NumGuess.scala 43:18]
    io.puzzle[1] <= UInt<4>("h0") @[NumGuess.scala 44:18]
    io.puzzle[2] <= UInt<4>("h0") @[NumGuess.scala 45:18]
    io.puzzle[3] <= UInt<4>("h0") @[NumGuess.scala 46:18]
    io.ready <= UInt<1>("h0") @[NumGuess.scala 47:15]
    io.g_valid <= UInt<1>("h0") @[NumGuess.scala 48:17]
    io.A <= UInt<1>("h0") @[NumGuess.scala 49:15]
    io.B <= UInt<1>("h0") @[NumGuess.scala 50:15]
    prng.io.gen <= UInt<1>("h0") @[NumGuess.scala 51:17]
    node _T = eq(UInt<4>("h0"), state) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _T_1 = eq(io.gen, UInt<1>("h1")) @[NumGuess.scala 56:25]
      when _T_1 : @[NumGuess.scala 56:36]
        state <= UInt<4>("h1") @[NumGuess.scala 56:43]
    else :
      node _T_2 = eq(UInt<4>("h1"), state) @[Conditional.scala 37:30]
      when _T_2 : @[Conditional.scala 39:67]
        node _T_3 = eq(regGoWait, UInt<1>("h1")) @[NumGuess.scala 59:28]
        when _T_3 : @[NumGuess.scala 59:39]
          state <= UInt<4>("h2") @[NumGuess.scala 59:46]
      else :
        node _T_4 = eq(UInt<4>("h2"), state) @[Conditional.scala 37:30]
        when _T_4 : @[Conditional.scala 39:67]
          node _T_5 = eq(prng.io.ready, UInt<1>("h1")) @[NumGuess.scala 62:32]
          when _T_5 : @[NumGuess.scala 62:43]
            state <= UInt<4>("h4") @[NumGuess.scala 62:50]
        else :
          node _T_6 = eq(UInt<4>("h4"), state) @[Conditional.scala 37:30]
          when _T_6 : @[Conditional.scala 39:67]
            when io.ready : @[NumGuess.scala 65:27]
              state <= UInt<4>("h3") @[NumGuess.scala 65:34]
          else :
            node _T_7 = eq(UInt<4>("h3"), state) @[Conditional.scala 37:30]
            when _T_7 : @[Conditional.scala 39:67]
              when regGoVerifierB : @[NumGuess.scala 68:33]
                state <= UInt<4>("h5") @[NumGuess.scala 68:40]
            else :
              node _T_8 = eq(UInt<4>("h5"), state) @[Conditional.scala 37:30]
              when _T_8 : @[Conditional.scala 39:67]
                when regGoVerifierB : @[NumGuess.scala 71:33]
                  state <= UInt<4>("h6") @[NumGuess.scala 71:40]
              else :
                node _T_9 = eq(UInt<4>("h6"), state) @[Conditional.scala 37:30]
                when _T_9 : @[Conditional.scala 39:67]
                  when regGoAnsCal : @[NumGuess.scala 74:30]
                    state <= UInt<4>("h7") @[NumGuess.scala 74:37]
                else :
                  node _T_10 = eq(UInt<4>("h7"), state) @[Conditional.scala 37:30]
                  when _T_10 : @[Conditional.scala 39:67]
                    when regGoOutput : @[NumGuess.scala 77:30]
                      state <= UInt<4>("h8") @[NumGuess.scala 77:37]
                  else :
                    node _T_11 = eq(UInt<4>("h8"), state) @[Conditional.scala 37:30]
                    when _T_11 : @[Conditional.scala 39:67]
                      state <= UInt<4>("h9") @[NumGuess.scala 80:19]
                    else :
                      node _T_12 = eq(UInt<4>("h9"), state) @[Conditional.scala 37:30]
                      when _T_12 : @[Conditional.scala 39:67]
                        state <= UInt<4>("h3") @[NumGuess.scala 83:19]
    node _T_13 = eq(state, UInt<4>("h0")) @[NumGuess.scala 88:16]
    when _T_13 : @[NumGuess.scala 88:26]
      io.ready <= UInt<1>("h0") @[NumGuess.scala 89:18]
    node _T_14 = eq(state, UInt<4>("h1")) @[NumGuess.scala 91:16]
    when _T_14 : @[NumGuess.scala 91:25]
      prng.io.gen <= UInt<1>("h1") @[NumGuess.scala 92:21]
      reg REG : UInt<1>, clock with :
        reset => (UInt<1>("h0"), REG) @[NumGuess.scala 93:29]
      REG <= UInt<1>("h1") @[NumGuess.scala 93:29]
      regGoWait <= REG @[NumGuess.scala 93:19]
    node _T_15 = eq(state, UInt<4>("h2")) @[NumGuess.scala 95:16]
    when _T_15 : @[NumGuess.scala 95:26]
      regGoWait <= UInt<1>("h0") @[NumGuess.scala 96:19]
    node _T_16 = eq(state, UInt<4>("h4")) @[NumGuess.scala 98:16]
    when _T_16 : @[NumGuess.scala 98:31]
      io.puzzle[0] <= prng.io.puzzle[0] @[NumGuess.scala 99:22]
      io.puzzle[1] <= prng.io.puzzle[1] @[NumGuess.scala 100:22]
      io.puzzle[2] <= prng.io.puzzle[2] @[NumGuess.scala 101:22]
      io.puzzle[3] <= prng.io.puzzle[3] @[NumGuess.scala 102:22]
      puzzleNums[0] <= prng.io.puzzle[0] @[NumGuess.scala 103:23]
      puzzleNums[1] <= prng.io.puzzle[1] @[NumGuess.scala 104:23]
      puzzleNums[2] <= prng.io.puzzle[2] @[NumGuess.scala 105:23]
      puzzleNums[3] <= prng.io.puzzle[3] @[NumGuess.scala 106:23]
      reg REG_1 : UInt<1>, clock with :
        reset => (UInt<1>("h0"), REG_1) @[NumGuess.scala 107:28]
      REG_1 <= UInt<1>("h1") @[NumGuess.scala 107:28]
      io.ready <= REG_1 @[NumGuess.scala 107:18]
    node _T_17 = eq(state, UInt<4>("h3")) @[NumGuess.scala 109:16]
    when _T_17 : @[NumGuess.scala 109:27]
      node _T_18 = bits(io.guess, 3, 0) @[NumGuess.scala 110:28]
      nums[0] <= _T_18 @[NumGuess.scala 110:17]
      node _T_19 = bits(io.guess, 7, 4) @[NumGuess.scala 111:28]
      nums[1] <= _T_19 @[NumGuess.scala 111:17]
      node _T_20 = bits(io.guess, 11, 8) @[NumGuess.scala 112:28]
      nums[2] <= _T_20 @[NumGuess.scala 112:17]
      node _T_21 = bits(io.guess, 15, 12) @[NumGuess.scala 113:28]
      nums[3] <= _T_21 @[NumGuess.scala 113:17]
      reg REG_2 : UInt<1>, clock with :
        reset => (UInt<1>("h0"), REG_2) @[NumGuess.scala 114:34]
      REG_2 <= UInt<1>("h1") @[NumGuess.scala 114:34]
      regGoVerifierA <= REG_2 @[NumGuess.scala 114:24]
    node _T_22 = eq(state, UInt<4>("h5")) @[NumGuess.scala 116:16]
    when _T_22 : @[NumGuess.scala 116:31]
      regGoVerifierA <= UInt<1>("h0") @[NumGuess.scala 117:24]
      node _T_23 = eq(puzzleNums[0], nums[0]) @[NumGuess.scala 119:44]
      node _T_24 = mux(_T_23, UInt<1>("h1"), UInt<1>("h0")) @[NumGuess.scala 119:29]
      regVerifyA[0] <= _T_24 @[NumGuess.scala 119:23]
      node _T_25 = eq(puzzleNums[1], nums[1]) @[NumGuess.scala 120:44]
      node _T_26 = mux(_T_25, UInt<1>("h1"), UInt<1>("h0")) @[NumGuess.scala 120:29]
      regVerifyA[1] <= _T_26 @[NumGuess.scala 120:23]
      node _T_27 = eq(puzzleNums[2], nums[2]) @[NumGuess.scala 121:44]
      node _T_28 = mux(_T_27, UInt<1>("h1"), UInt<1>("h0")) @[NumGuess.scala 121:29]
      regVerifyA[2] <= _T_28 @[NumGuess.scala 121:23]
      node _T_29 = eq(puzzleNums[3], nums[3]) @[NumGuess.scala 122:44]
      node _T_30 = mux(_T_29, UInt<1>("h1"), UInt<1>("h0")) @[NumGuess.scala 122:29]
      regVerifyA[3] <= _T_30 @[NumGuess.scala 122:23]
      reg REG_3 : UInt<1>, clock with :
        reset => (UInt<1>("h0"), REG_3) @[NumGuess.scala 123:34]
      REG_3 <= UInt<1>("h1") @[NumGuess.scala 123:34]
      regGoVerifierB <= REG_3 @[NumGuess.scala 123:24]
    node _T_31 = eq(state, UInt<4>("h6")) @[NumGuess.scala 125:16]
    when _T_31 : @[NumGuess.scala 125:31]
      regGoVerifierB <= UInt<1>("h0") @[NumGuess.scala 126:24]
      node _T_32 = eq(puzzleNums[0], nums[1]) @[NumGuess.scala 128:44]
      node _T_33 = mux(_T_32, UInt<1>("h1"), UInt<1>("h0")) @[NumGuess.scala 128:29]
      regVerifyB[0] <= _T_33 @[NumGuess.scala 128:23]
      node _T_34 = eq(puzzleNums[0], nums[2]) @[NumGuess.scala 129:44]
      node _T_35 = mux(_T_34, UInt<1>("h1"), UInt<1>("h0")) @[NumGuess.scala 129:29]
      regVerifyB[1] <= _T_35 @[NumGuess.scala 129:23]
      node _T_36 = eq(puzzleNums[0], nums[3]) @[NumGuess.scala 130:44]
      node _T_37 = mux(_T_36, UInt<1>("h1"), UInt<1>("h0")) @[NumGuess.scala 130:29]
      regVerifyB[2] <= _T_37 @[NumGuess.scala 130:23]
      node _T_38 = eq(puzzleNums[1], nums[0]) @[NumGuess.scala 131:44]
      node _T_39 = mux(_T_38, UInt<1>("h1"), UInt<1>("h0")) @[NumGuess.scala 131:29]
      regVerifyB[3] <= _T_39 @[NumGuess.scala 131:23]
      node _T_40 = eq(puzzleNums[1], nums[2]) @[NumGuess.scala 132:44]
      node _T_41 = mux(_T_40, UInt<1>("h1"), UInt<1>("h0")) @[NumGuess.scala 132:29]
      regVerifyB[4] <= _T_41 @[NumGuess.scala 132:23]
      node _T_42 = eq(puzzleNums[1], nums[3]) @[NumGuess.scala 133:44]
      node _T_43 = mux(_T_42, UInt<1>("h1"), UInt<1>("h0")) @[NumGuess.scala 133:29]
      regVerifyB[5] <= _T_43 @[NumGuess.scala 133:23]
      node _T_44 = eq(puzzleNums[2], nums[0]) @[NumGuess.scala 134:44]
      node _T_45 = mux(_T_44, UInt<1>("h1"), UInt<1>("h0")) @[NumGuess.scala 134:29]
      regVerifyB[6] <= _T_45 @[NumGuess.scala 134:23]
      node _T_46 = eq(puzzleNums[2], nums[1]) @[NumGuess.scala 135:44]
      node _T_47 = mux(_T_46, UInt<1>("h1"), UInt<1>("h0")) @[NumGuess.scala 135:29]
      regVerifyB[7] <= _T_47 @[NumGuess.scala 135:23]
      node _T_48 = eq(puzzleNums[2], nums[3]) @[NumGuess.scala 136:44]
      node _T_49 = mux(_T_48, UInt<1>("h1"), UInt<1>("h0")) @[NumGuess.scala 136:29]
      regVerifyB[8] <= _T_49 @[NumGuess.scala 136:23]
      node _T_50 = eq(puzzleNums[3], nums[0]) @[NumGuess.scala 137:44]
      node _T_51 = mux(_T_50, UInt<1>("h1"), UInt<1>("h0")) @[NumGuess.scala 137:29]
      regVerifyB[9] <= _T_51 @[NumGuess.scala 137:23]
      node _T_52 = eq(puzzleNums[3], nums[1]) @[NumGuess.scala 138:45]
      node _T_53 = mux(_T_52, UInt<1>("h1"), UInt<1>("h0")) @[NumGuess.scala 138:30]
      regVerifyB[10] <= _T_53 @[NumGuess.scala 138:24]
      node _T_54 = eq(puzzleNums[3], nums[2]) @[NumGuess.scala 139:45]
      node _T_55 = mux(_T_54, UInt<1>("h1"), UInt<1>("h0")) @[NumGuess.scala 139:30]
      regVerifyB[11] <= _T_55 @[NumGuess.scala 139:24]
      cntA <= UInt<1>("h0") @[NumGuess.scala 140:14]
      cntB <= UInt<1>("h0") @[NumGuess.scala 141:14]
      reg REG_4 : UInt<1>, clock with :
        reset => (UInt<1>("h0"), REG_4) @[NumGuess.scala 142:31]
      REG_4 <= UInt<1>("h1") @[NumGuess.scala 142:31]
      regGoAnsCal <= REG_4 @[NumGuess.scala 142:21]
    node _T_56 = eq(state, UInt<4>("h7")) @[NumGuess.scala 144:16]
    when _T_56 : @[NumGuess.scala 144:31]
      regGoAnsCal <= UInt<1>("h0") @[NumGuess.scala 145:21]
      node _T_57 = add(regVerifyA[0], regVerifyA[1]) @[NumGuess.scala 146:31]
      node _T_58 = tail(_T_57, 1) @[NumGuess.scala 146:31]
      node _T_59 = add(_T_58, regVerifyA[2]) @[NumGuess.scala 146:47]
      node _T_60 = tail(_T_59, 1) @[NumGuess.scala 146:47]
      node _T_61 = add(_T_60, regVerifyA[3]) @[NumGuess.scala 146:63]
      node _T_62 = tail(_T_61, 1) @[NumGuess.scala 146:63]
      cntA <= _T_62 @[NumGuess.scala 146:14]
      node _T_63 = add(regVerifyB[0], regVerifyB[1]) @[NumGuess.scala 147:31]
      node _T_64 = tail(_T_63, 1) @[NumGuess.scala 147:31]
      node _T_65 = add(_T_64, regVerifyB[2]) @[NumGuess.scala 147:47]
      node _T_66 = tail(_T_65, 1) @[NumGuess.scala 147:47]
      node _T_67 = add(_T_66, regVerifyB[3]) @[NumGuess.scala 147:63]
      node _T_68 = tail(_T_67, 1) @[NumGuess.scala 147:63]
      node _T_69 = add(_T_68, regVerifyB[4]) @[NumGuess.scala 147:79]
      node _T_70 = tail(_T_69, 1) @[NumGuess.scala 147:79]
      node _T_71 = add(_T_70, regVerifyB[5]) @[NumGuess.scala 147:95]
      node _T_72 = tail(_T_71, 1) @[NumGuess.scala 147:95]
      node _T_73 = add(_T_72, regVerifyB[6]) @[NumGuess.scala 147:111]
      node _T_74 = tail(_T_73, 1) @[NumGuess.scala 147:111]
      node _T_75 = add(_T_74, regVerifyB[7]) @[NumGuess.scala 147:127]
      node _T_76 = tail(_T_75, 1) @[NumGuess.scala 147:127]
      node _T_77 = add(_T_76, regVerifyB[8]) @[NumGuess.scala 147:143]
      node _T_78 = tail(_T_77, 1) @[NumGuess.scala 147:143]
      node _T_79 = add(_T_78, regVerifyB[9]) @[NumGuess.scala 147:159]
      node _T_80 = tail(_T_79, 1) @[NumGuess.scala 147:159]
      node _T_81 = add(_T_80, regVerifyB[10]) @[NumGuess.scala 147:175]
      node _T_82 = tail(_T_81, 1) @[NumGuess.scala 147:175]
      node _T_83 = add(_T_82, regVerifyB[11]) @[NumGuess.scala 147:192]
      node _T_84 = tail(_T_83, 1) @[NumGuess.scala 147:192]
      cntB <= _T_84 @[NumGuess.scala 147:14]
      reg REG_5 : UInt<1>, clock with :
        reset => (UInt<1>("h0"), REG_5) @[NumGuess.scala 148:31]
      REG_5 <= UInt<1>("h1") @[NumGuess.scala 148:31]
      regGoOutput <= REG_5 @[NumGuess.scala 148:21]
    node _T_85 = eq(state, UInt<4>("h8")) @[NumGuess.scala 150:16]
    when _T_85 : @[NumGuess.scala 150:28]
      regGoOutput <= UInt<1>("h0") @[NumGuess.scala 151:21]
      io.g_valid <= UInt<1>("h1") @[NumGuess.scala 152:20]
      io.A <= cntA @[NumGuess.scala 153:14]
      io.B <= cntB @[NumGuess.scala 154:14]
      nums[0] <= UInt<1>("h0") @[NumGuess.scala 155:17]
      nums[1] <= UInt<1>("h0") @[NumGuess.scala 156:17]
      nums[2] <= UInt<1>("h0") @[NumGuess.scala 157:17]
      nums[3] <= UInt<1>("h0") @[NumGuess.scala 158:17]
    node _T_86 = eq(state, UInt<4>("h9")) @[NumGuess.scala 160:16]
    when _T_86 : @[NumGuess.scala 160:29]
      io.g_valid <= UInt<1>("h0") @[NumGuess.scala 161:20]
      io.A <= cntA @[NumGuess.scala 162:14]
      io.B <= cntB @[NumGuess.scala 163:14]

