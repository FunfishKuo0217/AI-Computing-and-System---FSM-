circuit PRNG :
  module PRNG :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip gen : UInt<1>, puzzle : UInt<4>[4], ready : UInt<1>}

    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[PRNG.scala 15:24]
    wire _WIRE : UInt<1>[16] @[PRNG.scala 17:35]
    _WIRE[0] <= UInt<1>("h1") @[PRNG.scala 17:35]
    _WIRE[1] <= UInt<1>("h1") @[PRNG.scala 17:35]
    _WIRE[2] <= UInt<1>("h1") @[PRNG.scala 17:35]
    _WIRE[3] <= UInt<1>("h1") @[PRNG.scala 17:35]
    _WIRE[4] <= UInt<1>("h1") @[PRNG.scala 17:35]
    _WIRE[5] <= UInt<1>("h1") @[PRNG.scala 17:35]
    _WIRE[6] <= UInt<1>("h1") @[PRNG.scala 17:35]
    _WIRE[7] <= UInt<1>("h1") @[PRNG.scala 17:35]
    _WIRE[8] <= UInt<1>("h1") @[PRNG.scala 17:35]
    _WIRE[9] <= UInt<1>("h1") @[PRNG.scala 17:35]
    _WIRE[10] <= UInt<1>("h1") @[PRNG.scala 17:35]
    _WIRE[11] <= UInt<1>("h1") @[PRNG.scala 17:35]
    _WIRE[12] <= UInt<1>("h1") @[PRNG.scala 17:35]
    _WIRE[13] <= UInt<1>("h1") @[PRNG.scala 17:35]
    _WIRE[14] <= UInt<1>("h1") @[PRNG.scala 17:35]
    _WIRE[15] <= UInt<1>("h1") @[PRNG.scala 17:35]
    reg shiftReg : UInt<1>[16], clock with :
      reset => (reset, _WIRE) @[PRNG.scala 17:27]
    wire _WIRE_1 : UInt<4>[4] @[PRNG.scala 18:33]
    _WIRE_1[0] <= UInt<4>("h0") @[PRNG.scala 18:33]
    _WIRE_1[1] <= UInt<4>("h0") @[PRNG.scala 18:33]
    _WIRE_1[2] <= UInt<4>("h0") @[PRNG.scala 18:33]
    _WIRE_1[3] <= UInt<4>("h0") @[PRNG.scala 18:33]
    reg regAns : UInt<4>[4], clock with :
      reset => (reset, _WIRE_1) @[PRNG.scala 18:25]
    wire _WIRE_2 : UInt<1>[6] @[PRNG.scala 19:33]
    _WIRE_2[0] <= UInt<1>("h1") @[PRNG.scala 19:33]
    _WIRE_2[1] <= UInt<1>("h1") @[PRNG.scala 19:33]
    _WIRE_2[2] <= UInt<1>("h1") @[PRNG.scala 19:33]
    _WIRE_2[3] <= UInt<1>("h1") @[PRNG.scala 19:33]
    _WIRE_2[4] <= UInt<1>("h1") @[PRNG.scala 19:33]
    _WIRE_2[5] <= UInt<1>("h1") @[PRNG.scala 19:33]
    reg regDup : UInt<1>[6], clock with :
      reset => (reset, _WIRE_2) @[PRNG.scala 19:25]
    reg goToRangeMap : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[PRNG.scala 20:31]
    reg goToCheckDup : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[PRNG.scala 21:31]
    reg goToValidateDup : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[PRNG.scala 22:34]
    reg goToOutput : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[PRNG.scala 23:29]
    reg goToReGen : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[PRNG.scala 24:28]
    reg cntReg : UInt<3>, clock with :
      reset => (reset, UInt<3>("h3")) @[PRNG.scala 27:25]
    wire cntDone : UInt<1> @[PRNG.scala 28:23]
    reg cntStart : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[PRNG.scala 29:27]
    node _T = eq(cntReg, UInt<1>("h0")) @[PRNG.scala 30:23]
    cntDone <= _T @[PRNG.scala 30:13]
    node _T_1 = eq(cntStart, UInt<1>("h1")) @[PRNG.scala 32:19]
    when _T_1 : @[PRNG.scala 32:30]
      when cntDone : @[PRNG.scala 33:22]
        cntReg <= UInt<2>("h3") @[PRNG.scala 33:31]
      else :
        node _T_2 = sub(cntReg, UInt<1>("h1")) @[PRNG.scala 34:37]
        node _T_3 = tail(_T_2, 1) @[PRNG.scala 34:37]
        cntReg <= _T_3 @[PRNG.scala 34:27]
    node _T_4 = eq(UInt<3>("h0"), state) @[Conditional.scala 37:30]
    when _T_4 : @[Conditional.scala 40:58]
      state <= UInt<3>("h1") @[PRNG.scala 39:26]
    else :
      node _T_5 = eq(UInt<3>("h1"), state) @[Conditional.scala 37:30]
      when _T_5 : @[Conditional.scala 39:67]
        node _T_6 = eq(cntDone, UInt<1>("h1")) @[PRNG.scala 40:33]
        when _T_6 : @[PRNG.scala 40:44]
          state <= UInt<3>("h5") @[PRNG.scala 40:52]
      else :
        node _T_7 = eq(UInt<3>("h5"), state) @[Conditional.scala 37:30]
        when _T_7 : @[Conditional.scala 39:67]
          node _T_8 = eq(goToRangeMap, UInt<1>("h1")) @[PRNG.scala 41:38]
          when _T_8 : @[PRNG.scala 41:49]
            state <= UInt<3>("h2") @[PRNG.scala 41:57]
        else :
          node _T_9 = eq(UInt<3>("h2"), state) @[Conditional.scala 37:30]
          when _T_9 : @[Conditional.scala 39:67]
            node _T_10 = eq(goToCheckDup, UInt<1>("h1")) @[PRNG.scala 42:43]
            when _T_10 : @[PRNG.scala 42:54]
              state <= UInt<3>("h3") @[PRNG.scala 42:62]
          else :
            node _T_11 = eq(UInt<3>("h3"), state) @[Conditional.scala 37:30]
            when _T_11 : @[Conditional.scala 39:67]
              node _T_12 = eq(goToValidateDup, UInt<1>("h1")) @[PRNG.scala 43:45]
              when _T_12 : @[PRNG.scala 43:56]
                state <= UInt<3>("h4") @[PRNG.scala 43:64]
            else :
              node _T_13 = eq(UInt<3>("h4"), state) @[Conditional.scala 37:30]
              when _T_13 : @[Conditional.scala 39:67]
                node _T_14 = eq(goToReGen, UInt<1>("h1")) @[PRNG.scala 45:28]
                when _T_14 : @[PRNG.scala 45:39]
                  state <= UInt<3>("h1") @[PRNG.scala 45:47]
                else :
                  node _T_15 = eq(goToOutput, UInt<1>("h1")) @[PRNG.scala 46:34]
                  when _T_15 : @[PRNG.scala 46:45]
                    state <= UInt<3>("h6") @[PRNG.scala 46:53]
              else :
                node _T_16 = eq(UInt<3>("h6"), state) @[Conditional.scala 37:30]
                when _T_16 : @[Conditional.scala 39:67]
                  node _T_17 = eq(io.gen, UInt<1>("h1")) @[PRNG.scala 49:25]
                  when _T_17 : @[PRNG.scala 49:36]
                    state <= UInt<3>("h0") @[PRNG.scala 49:44]
    io.ready <= UInt<1>("h0") @[PRNG.scala 54:14]
    wire _WIRE_3 : UInt<4>[4] @[PRNG.scala 55:25]
    _WIRE_3[0] <= UInt<4>("h0") @[PRNG.scala 55:25]
    _WIRE_3[1] <= UInt<4>("h0") @[PRNG.scala 55:25]
    _WIRE_3[2] <= UInt<4>("h0") @[PRNG.scala 55:25]
    _WIRE_3[3] <= UInt<4>("h0") @[PRNG.scala 55:25]
    io.puzzle[0] <= _WIRE_3[0] @[PRNG.scala 55:15]
    io.puzzle[1] <= _WIRE_3[1] @[PRNG.scala 55:15]
    io.puzzle[2] <= _WIRE_3[2] @[PRNG.scala 55:15]
    io.puzzle[3] <= _WIRE_3[3] @[PRNG.scala 55:15]
    node _T_18 = eq(state, UInt<3>("h0")) @[PRNG.scala 58:16]
    when _T_18 : @[PRNG.scala 58:26]
      node _T_19 = eq(io.ready, UInt<1>("h0")) @[PRNG.scala 59:18]
    node _T_20 = eq(state, UInt<3>("h1")) @[PRNG.scala 61:16]
    when _T_20 : @[PRNG.scala 61:26]
      cntStart <= UInt<1>("h1") @[PRNG.scala 62:18]
      goToReGen <= UInt<1>("h0") @[PRNG.scala 63:19]
      goToOutput <= UInt<1>("h0") @[PRNG.scala 64:20]
      shiftReg[0] <= shiftReg[1] @[PRNG.scala 65:54]
      shiftReg[1] <= shiftReg[2] @[PRNG.scala 65:54]
      shiftReg[2] <= shiftReg[3] @[PRNG.scala 65:54]
      shiftReg[3] <= shiftReg[4] @[PRNG.scala 65:54]
      shiftReg[4] <= shiftReg[5] @[PRNG.scala 65:54]
      shiftReg[5] <= shiftReg[6] @[PRNG.scala 65:54]
      shiftReg[6] <= shiftReg[7] @[PRNG.scala 65:54]
      shiftReg[7] <= shiftReg[8] @[PRNG.scala 65:54]
      shiftReg[8] <= shiftReg[9] @[PRNG.scala 65:54]
      shiftReg[9] <= shiftReg[10] @[PRNG.scala 65:54]
      shiftReg[10] <= shiftReg[11] @[PRNG.scala 65:54]
      shiftReg[11] <= shiftReg[12] @[PRNG.scala 65:54]
      shiftReg[12] <= shiftReg[13] @[PRNG.scala 65:54]
      shiftReg[13] <= shiftReg[14] @[PRNG.scala 65:54]
      shiftReg[14] <= shiftReg[15] @[PRNG.scala 65:54]
      shiftReg[15] <= shiftReg[0] @[PRNG.scala 65:54]
      node _T_21 = xor(shiftReg[0], shiftReg[2]) @[PRNG.scala 66:38]
      node _T_22 = xor(_T_21, shiftReg[3]) @[PRNG.scala 66:51]
      node _T_23 = xor(_T_22, shiftReg[5]) @[PRNG.scala 66:64]
      shiftReg[15] <= _T_23 @[PRNG.scala 66:22]
    node _T_24 = eq(state, UInt<3>("h5")) @[PRNG.scala 68:16]
    when _T_24 : @[PRNG.scala 68:25]
      cntStart <= UInt<1>("h0") @[PRNG.scala 69:18]
      cntReg <= UInt<2>("h3") @[PRNG.scala 70:16]
      node lo = cat(shiftReg[1], shiftReg[0]) @[Cat.scala 30:58]
      node hi = cat(shiftReg[3], shiftReg[2]) @[Cat.scala 30:58]
      node _T_25 = cat(hi, lo) @[Cat.scala 30:58]
      regAns[0] <= _T_25 @[PRNG.scala 71:19]
      node lo_1 = cat(shiftReg[5], shiftReg[4]) @[Cat.scala 30:58]
      node hi_1 = cat(shiftReg[7], shiftReg[6]) @[Cat.scala 30:58]
      node _T_26 = cat(hi_1, lo_1) @[Cat.scala 30:58]
      regAns[1] <= _T_26 @[PRNG.scala 72:19]
      node lo_2 = cat(shiftReg[9], shiftReg[8]) @[Cat.scala 30:58]
      node hi_2 = cat(shiftReg[11], shiftReg[10]) @[Cat.scala 30:58]
      node _T_27 = cat(hi_2, lo_2) @[Cat.scala 30:58]
      regAns[2] <= _T_27 @[PRNG.scala 73:19]
      node lo_3 = cat(shiftReg[13], shiftReg[12]) @[Cat.scala 30:58]
      node hi_3 = cat(shiftReg[15], shiftReg[14]) @[Cat.scala 30:58]
      node _T_28 = cat(hi_3, lo_3) @[Cat.scala 30:58]
      regAns[3] <= _T_28 @[PRNG.scala 74:19]
      reg REG : UInt<1>, clock with :
        reset => (UInt<1>("h0"), REG) @[PRNG.scala 75:32]
      REG <= UInt<1>("h1") @[PRNG.scala 75:32]
      goToRangeMap <= REG @[PRNG.scala 75:22]
    node _T_29 = eq(state, UInt<3>("h2")) @[PRNG.scala 77:16]
    when _T_29 : @[PRNG.scala 77:30]
      goToRangeMap <= UInt<1>("h0") @[PRNG.scala 78:22]
      node _T_30 = gt(regAns[0], UInt<4>("h9")) @[PRNG.scala 79:36]
      node _T_31 = sub(regAns[0], UInt<4>("ha")) @[PRNG.scala 79:53]
      node _T_32 = tail(_T_31, 1) @[PRNG.scala 79:53]
      node _T_33 = mux(_T_30, _T_32, regAns[0]) @[PRNG.scala 79:25]
      regAns[0] <= _T_33 @[PRNG.scala 79:19]
      node _T_34 = gt(regAns[1], UInt<4>("h9")) @[PRNG.scala 80:36]
      node _T_35 = sub(regAns[1], UInt<4>("ha")) @[PRNG.scala 80:53]
      node _T_36 = tail(_T_35, 1) @[PRNG.scala 80:53]
      node _T_37 = mux(_T_34, _T_36, regAns[1]) @[PRNG.scala 80:25]
      regAns[1] <= _T_37 @[PRNG.scala 80:19]
      node _T_38 = gt(regAns[2], UInt<4>("h9")) @[PRNG.scala 81:36]
      node _T_39 = sub(regAns[2], UInt<4>("ha")) @[PRNG.scala 81:53]
      node _T_40 = tail(_T_39, 1) @[PRNG.scala 81:53]
      node _T_41 = mux(_T_38, _T_40, regAns[2]) @[PRNG.scala 81:25]
      regAns[2] <= _T_41 @[PRNG.scala 81:19]
      node _T_42 = gt(regAns[3], UInt<4>("h9")) @[PRNG.scala 82:36]
      node _T_43 = sub(regAns[3], UInt<4>("ha")) @[PRNG.scala 82:53]
      node _T_44 = tail(_T_43, 1) @[PRNG.scala 82:53]
      node _T_45 = mux(_T_42, _T_44, regAns[3]) @[PRNG.scala 82:25]
      regAns[3] <= _T_45 @[PRNG.scala 82:19]
      reg REG_1 : UInt<1>, clock with :
        reset => (UInt<1>("h0"), REG_1) @[PRNG.scala 83:32]
      REG_1 <= UInt<1>("h1") @[PRNG.scala 83:32]
      goToCheckDup <= REG_1 @[PRNG.scala 83:22]
    node _T_46 = eq(state, UInt<3>("h3")) @[PRNG.scala 85:16]
    when _T_46 : @[PRNG.scala 85:30]
      goToCheckDup <= UInt<1>("h0") @[PRNG.scala 86:22]
      node _T_47 = eq(regAns[0], regAns[1]) @[PRNG.scala 88:36]
      node _T_48 = mux(_T_47, UInt<1>("h1"), UInt<1>("h0")) @[PRNG.scala 88:25]
      regDup[0] <= _T_48 @[PRNG.scala 88:19]
      node _T_49 = eq(regAns[0], regAns[2]) @[PRNG.scala 89:36]
      node _T_50 = mux(_T_49, UInt<1>("h1"), UInt<1>("h0")) @[PRNG.scala 89:25]
      regDup[1] <= _T_50 @[PRNG.scala 89:19]
      node _T_51 = eq(regAns[0], regAns[3]) @[PRNG.scala 90:36]
      node _T_52 = mux(_T_51, UInt<1>("h1"), UInt<1>("h0")) @[PRNG.scala 90:25]
      regDup[2] <= _T_52 @[PRNG.scala 90:19]
      node _T_53 = eq(regAns[1], regAns[2]) @[PRNG.scala 91:36]
      node _T_54 = mux(_T_53, UInt<1>("h1"), UInt<1>("h0")) @[PRNG.scala 91:25]
      regDup[3] <= _T_54 @[PRNG.scala 91:19]
      node _T_55 = eq(regAns[1], regAns[3]) @[PRNG.scala 92:36]
      node _T_56 = mux(_T_55, UInt<1>("h1"), UInt<1>("h0")) @[PRNG.scala 92:25]
      regDup[4] <= _T_56 @[PRNG.scala 92:19]
      node _T_57 = eq(regAns[2], regAns[3]) @[PRNG.scala 93:36]
      node _T_58 = mux(_T_57, UInt<1>("h1"), UInt<1>("h0")) @[PRNG.scala 93:25]
      regDup[5] <= _T_58 @[PRNG.scala 93:19]
      reg REG_2 : UInt<1>, clock with :
        reset => (UInt<1>("h0"), REG_2) @[PRNG.scala 94:35]
      REG_2 <= UInt<1>("h1") @[PRNG.scala 94:35]
      goToValidateDup <= REG_2 @[PRNG.scala 94:25]
    node _T_59 = eq(state, UInt<3>("h4")) @[PRNG.scala 96:16]
    when _T_59 : @[PRNG.scala 96:28]
      goToValidateDup <= UInt<1>("h0") @[PRNG.scala 97:25]
      node _T_60 = or(regDup[0], regDup[1]) @[PRNG.scala 98:44]
      node _T_61 = or(_T_60, regDup[2]) @[PRNG.scala 98:55]
      node _T_62 = or(_T_61, regDup[3]) @[PRNG.scala 98:66]
      node _T_63 = or(_T_62, regDup[4]) @[PRNG.scala 98:77]
      node _T_64 = or(_T_63, regDup[5]) @[PRNG.scala 98:88]
      node _T_65 = eq(_T_64, UInt<1>("h1")) @[PRNG.scala 98:100]
      node _T_66 = mux(_T_65, UInt<1>("h1"), UInt<1>("h0")) @[PRNG.scala 98:33]
      reg REG_3 : UInt<1>, clock with :
        reset => (UInt<1>("h0"), REG_3) @[PRNG.scala 98:29]
      REG_3 <= _T_66 @[PRNG.scala 98:29]
      goToReGen <= REG_3 @[PRNG.scala 98:19]
      node _T_67 = or(regDup[0], regDup[1]) @[PRNG.scala 99:45]
      node _T_68 = or(_T_67, regDup[2]) @[PRNG.scala 99:56]
      node _T_69 = or(_T_68, regDup[3]) @[PRNG.scala 99:67]
      node _T_70 = or(_T_69, regDup[4]) @[PRNG.scala 99:78]
      node _T_71 = or(_T_70, regDup[5]) @[PRNG.scala 99:89]
      node _T_72 = eq(_T_71, UInt<1>("h0")) @[PRNG.scala 99:101]
      node _T_73 = mux(_T_72, UInt<1>("h1"), UInt<1>("h0")) @[PRNG.scala 99:34]
      reg REG_4 : UInt<1>, clock with :
        reset => (UInt<1>("h0"), REG_4) @[PRNG.scala 99:30]
      REG_4 <= _T_73 @[PRNG.scala 99:30]
      goToOutput <= REG_4 @[PRNG.scala 99:20]
    node _T_74 = eq(state, UInt<3>("h6")) @[PRNG.scala 101:16]
    when _T_74 : @[PRNG.scala 101:28]
      goToOutput <= UInt<1>("h0") @[PRNG.scala 102:20]
      goToReGen <= UInt<1>("h0") @[PRNG.scala 103:19]
      io.puzzle[0] <= regAns[0] @[PRNG.scala 104:22]
      io.puzzle[1] <= regAns[1] @[PRNG.scala 105:22]
      io.puzzle[2] <= regAns[2] @[PRNG.scala 106:22]
      io.puzzle[3] <= regAns[3] @[PRNG.scala 107:22]
      reg REG_5 : UInt<1>, clock with :
        reset => (UInt<1>("h0"), REG_5) @[PRNG.scala 108:28]
      REG_5 <= UInt<1>("h1") @[PRNG.scala 108:28]
      io.ready <= REG_5 @[PRNG.scala 108:18]

