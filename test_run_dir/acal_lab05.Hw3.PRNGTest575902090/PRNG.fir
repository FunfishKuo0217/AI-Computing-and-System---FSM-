circuit PRNG :
  module PRNG :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip gen : UInt<1>, puzzle : UInt<4>[4], ready : UInt<1>}

    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[PRNG.scala 126:23]
    wire _WIRE : UInt<1>[16] @[PRNG.scala 127:34]
    _WIRE[0] <= UInt<1>("h1") @[PRNG.scala 127:34]
    _WIRE[1] <= UInt<1>("h1") @[PRNG.scala 127:34]
    _WIRE[2] <= UInt<1>("h1") @[PRNG.scala 127:34]
    _WIRE[3] <= UInt<1>("h1") @[PRNG.scala 127:34]
    _WIRE[4] <= UInt<1>("h1") @[PRNG.scala 127:34]
    _WIRE[5] <= UInt<1>("h1") @[PRNG.scala 127:34]
    _WIRE[6] <= UInt<1>("h1") @[PRNG.scala 127:34]
    _WIRE[7] <= UInt<1>("h1") @[PRNG.scala 127:34]
    _WIRE[8] <= UInt<1>("h1") @[PRNG.scala 127:34]
    _WIRE[9] <= UInt<1>("h1") @[PRNG.scala 127:34]
    _WIRE[10] <= UInt<1>("h1") @[PRNG.scala 127:34]
    _WIRE[11] <= UInt<1>("h1") @[PRNG.scala 127:34]
    _WIRE[12] <= UInt<1>("h1") @[PRNG.scala 127:34]
    _WIRE[13] <= UInt<1>("h1") @[PRNG.scala 127:34]
    _WIRE[14] <= UInt<1>("h1") @[PRNG.scala 127:34]
    _WIRE[15] <= UInt<1>("h1") @[PRNG.scala 127:34]
    reg shiftReg : UInt<1>[16], clock with :
      reset => (reset, _WIRE) @[PRNG.scala 127:26]
    wire _WIRE_1 : UInt<4>[4] @[PRNG.scala 128:32]
    _WIRE_1[0] <= UInt<4>("h0") @[PRNG.scala 128:32]
    _WIRE_1[1] <= UInt<4>("h0") @[PRNG.scala 128:32]
    _WIRE_1[2] <= UInt<4>("h0") @[PRNG.scala 128:32]
    _WIRE_1[3] <= UInt<4>("h0") @[PRNG.scala 128:32]
    reg ansReg : UInt<4>[4], clock with :
      reset => (reset, _WIRE_1) @[PRNG.scala 128:24]
    wire _WIRE_2 : UInt<1>[6] @[PRNG.scala 129:33]
    _WIRE_2[0] <= UInt<1>("h1") @[PRNG.scala 129:33]
    _WIRE_2[1] <= UInt<1>("h1") @[PRNG.scala 129:33]
    _WIRE_2[2] <= UInt<1>("h1") @[PRNG.scala 129:33]
    _WIRE_2[3] <= UInt<1>("h1") @[PRNG.scala 129:33]
    _WIRE_2[4] <= UInt<1>("h1") @[PRNG.scala 129:33]
    _WIRE_2[5] <= UInt<1>("h1") @[PRNG.scala 129:33]
    reg dupeReg : UInt<1>[6], clock with :
      reset => (reset, _WIRE_2) @[PRNG.scala 129:25]
    reg goToCheckRangeReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[PRNG.scala 130:34]
    reg goToCheckDupeReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[PRNG.scala 131:33]
    reg goToVerifyDupeReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[PRNG.scala 132:34]
    reg outputAnsReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[PRNG.scala 133:29]
    reg reGenReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[PRNG.scala 134:25]
    reg cntReg : UInt<3>, clock with :
      reset => (reset, UInt<3>("h5")) @[PRNG.scala 139:24]
    wire cntDone : UInt<1> @[PRNG.scala 140:22]
    reg cntStart : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[PRNG.scala 141:26]
    node _T = eq(cntReg, UInt<1>("h0")) @[PRNG.scala 142:22]
    cntDone <= _T @[PRNG.scala 142:12]
    node _T_1 = eq(cntStart, UInt<1>("h1")) @[PRNG.scala 145:17]
    when _T_1 : @[PRNG.scala 146:4]
      when cntDone : @[PRNG.scala 147:20]
        cntReg <= UInt<3>("h5") @[PRNG.scala 148:16]
      else :
        node _T_2 = sub(cntReg, UInt<1>("h1")) @[PRNG.scala 150:27]
        node _T_3 = tail(_T_2, 1) @[PRNG.scala 150:27]
        cntReg <= _T_3 @[PRNG.scala 150:17]
    node _T_4 = eq(UInt<3>("h0"), state) @[Conditional.scala 37:30]
    when _T_4 : @[Conditional.scala 40:58]
      state <= UInt<3>("h1") @[PRNG.scala 160:16]
    else :
      node _T_5 = eq(UInt<3>("h1"), state) @[Conditional.scala 37:30]
      when _T_5 : @[Conditional.scala 39:67]
        node _T_6 = eq(cntDone, UInt<1>("h1")) @[PRNG.scala 163:22]
        when _T_6 : @[PRNG.scala 163:33]
          state <= UInt<3>("h5") @[PRNG.scala 163:40]
      else :
        node _T_7 = eq(UInt<3>("h5"), state) @[Conditional.scala 37:30]
        when _T_7 : @[Conditional.scala 39:67]
          node _T_8 = eq(goToCheckRangeReg, UInt<1>("h1")) @[PRNG.scala 166:32]
          when _T_8 : @[PRNG.scala 166:42]
            state <= UInt<3>("h2") @[PRNG.scala 166:49]
        else :
          node _T_9 = eq(UInt<3>("h2"), state) @[Conditional.scala 37:30]
          when _T_9 : @[Conditional.scala 39:67]
            node _T_10 = eq(goToCheckDupeReg, UInt<1>("h1")) @[PRNG.scala 169:31]
            when _T_10 : @[PRNG.scala 169:41]
              state <= UInt<3>("h3") @[PRNG.scala 169:48]
          else :
            node _T_11 = eq(UInt<3>("h3"), state) @[Conditional.scala 37:30]
            when _T_11 : @[Conditional.scala 39:67]
              node _T_12 = eq(goToVerifyDupeReg, UInt<1>("h1")) @[PRNG.scala 173:32]
              when _T_12 : @[PRNG.scala 173:42]
                state <= UInt<3>("h4") @[PRNG.scala 173:48]
            else :
              node _T_13 = eq(UInt<3>("h4"), state) @[Conditional.scala 37:30]
              when _T_13 : @[Conditional.scala 39:67]
                node _T_14 = eq(reGenReg, UInt<1>("h1")) @[PRNG.scala 176:23]
                when _T_14 : @[PRNG.scala 176:33]
                  state <= UInt<3>("h1") @[PRNG.scala 176:40]
                else :
                  node _T_15 = eq(outputAnsReg, UInt<1>("h1")) @[PRNG.scala 177:32]
                  when _T_15 : @[PRNG.scala 177:42]
                    state <= UInt<3>("h6") @[PRNG.scala 177:49]
              else :
                node _T_16 = eq(UInt<3>("h6"), state) @[Conditional.scala 37:30]
                when _T_16 : @[Conditional.scala 39:67]
                  node _T_17 = eq(io.gen, UInt<1>("h1")) @[PRNG.scala 180:21]
                  when _T_17 : @[PRNG.scala 180:31]
                    state <= UInt<3>("h0") @[PRNG.scala 180:37]
    io.ready <= UInt<1>("h0") @[PRNG.scala 185:12]
    wire _WIRE_3 : UInt<4>[4] @[PRNG.scala 186:24]
    _WIRE_3[0] <= UInt<4>("h0") @[PRNG.scala 186:24]
    _WIRE_3[1] <= UInt<4>("h0") @[PRNG.scala 186:24]
    _WIRE_3[2] <= UInt<4>("h0") @[PRNG.scala 186:24]
    _WIRE_3[3] <= UInt<4>("h0") @[PRNG.scala 186:24]
    io.puzzle[0] <= _WIRE_3[0] @[PRNG.scala 186:14]
    io.puzzle[1] <= _WIRE_3[1] @[PRNG.scala 186:14]
    io.puzzle[2] <= _WIRE_3[2] @[PRNG.scala 186:14]
    io.puzzle[3] <= _WIRE_3[3] @[PRNG.scala 186:14]
    node _T_18 = eq(state, UInt<3>("h0")) @[PRNG.scala 191:14]
    when _T_18 : @[PRNG.scala 191:23]
      node _T_19 = eq(io.ready, UInt<1>("h0")) @[PRNG.scala 192:15]
    else :
      node _T_20 = eq(state, UInt<3>("h1")) @[PRNG.scala 194:20]
      when _T_20 : @[PRNG.scala 194:29]
        cntStart <= UInt<1>("h1") @[PRNG.scala 195:15]
        reGenReg <= UInt<1>("h0") @[PRNG.scala 196:15]
        outputAnsReg <= UInt<1>("h0") @[PRNG.scala 197:20]
        shiftReg[0] <= shiftReg[1] @[PRNG.scala 199:52]
        shiftReg[1] <= shiftReg[2] @[PRNG.scala 199:52]
        shiftReg[2] <= shiftReg[3] @[PRNG.scala 199:52]
        shiftReg[3] <= shiftReg[4] @[PRNG.scala 199:52]
        shiftReg[4] <= shiftReg[5] @[PRNG.scala 199:52]
        shiftReg[5] <= shiftReg[6] @[PRNG.scala 199:52]
        shiftReg[6] <= shiftReg[7] @[PRNG.scala 199:52]
        shiftReg[7] <= shiftReg[8] @[PRNG.scala 199:52]
        shiftReg[8] <= shiftReg[9] @[PRNG.scala 199:52]
        shiftReg[9] <= shiftReg[10] @[PRNG.scala 199:52]
        shiftReg[10] <= shiftReg[11] @[PRNG.scala 199:52]
        shiftReg[11] <= shiftReg[12] @[PRNG.scala 199:52]
        shiftReg[12] <= shiftReg[13] @[PRNG.scala 199:52]
        shiftReg[13] <= shiftReg[14] @[PRNG.scala 199:52]
        shiftReg[14] <= shiftReg[15] @[PRNG.scala 199:52]
        shiftReg[15] <= shiftReg[0] @[PRNG.scala 199:52]
        node _T_21 = xor(shiftReg[0], shiftReg[2]) @[PRNG.scala 201:36]
        node _T_22 = xor(_T_21, shiftReg[3]) @[PRNG.scala 201:49]
        node _T_23 = xor(_T_22, shiftReg[5]) @[PRNG.scala 201:62]
        shiftReg[15] <= _T_23 @[PRNG.scala 201:20]
      else :
        node _T_24 = eq(state, UInt<3>("h5")) @[PRNG.scala 203:20]
        when _T_24 : @[PRNG.scala 203:28]
          cntStart <= UInt<1>("h0") @[PRNG.scala 204:15]
          cntReg <= UInt<3>("h5") @[PRNG.scala 205:13]
          node lo = cat(shiftReg[1], shiftReg[0]) @[Cat.scala 30:58]
          node hi = cat(shiftReg[3], shiftReg[2]) @[Cat.scala 30:58]
          node _T_25 = cat(hi, lo) @[Cat.scala 30:58]
          ansReg[0] <= _T_25 @[PRNG.scala 206:16]
          node lo_1 = cat(shiftReg[5], shiftReg[4]) @[Cat.scala 30:58]
          node hi_1 = cat(shiftReg[7], shiftReg[6]) @[Cat.scala 30:58]
          node _T_26 = cat(hi_1, lo_1) @[Cat.scala 30:58]
          ansReg[1] <= _T_26 @[PRNG.scala 207:16]
          node lo_2 = cat(shiftReg[9], shiftReg[8]) @[Cat.scala 30:58]
          node hi_2 = cat(shiftReg[11], shiftReg[10]) @[Cat.scala 30:58]
          node _T_27 = cat(hi_2, lo_2) @[Cat.scala 30:58]
          ansReg[2] <= _T_27 @[PRNG.scala 208:16]
          node lo_3 = cat(shiftReg[13], shiftReg[12]) @[Cat.scala 30:58]
          node hi_3 = cat(shiftReg[15], shiftReg[14]) @[Cat.scala 30:58]
          node _T_28 = cat(hi_3, lo_3) @[Cat.scala 30:58]
          ansReg[3] <= _T_28 @[PRNG.scala 209:16]
          reg REG : UInt<1>, clock with :
            reset => (UInt<1>("h0"), REG) @[PRNG.scala 210:35]
          REG <= UInt<1>("h1") @[PRNG.scala 210:35]
          goToCheckRangeReg <= REG @[PRNG.scala 210:25]
        else :
          node _T_29 = eq(state, UInt<3>("h2")) @[PRNG.scala 213:20]
          when _T_29 : @[PRNG.scala 213:35]
            goToCheckRangeReg <= UInt<1>("h0") @[PRNG.scala 214:24]
            node _T_30 = gt(ansReg[0], UInt<4>("h9")) @[PRNG.scala 215:31]
            node _T_31 = sub(ansReg[0], UInt<4>("ha")) @[PRNG.scala 215:45]
            node _T_32 = tail(_T_31, 1) @[PRNG.scala 215:45]
            node _T_33 = mux(_T_30, _T_32, ansReg[0]) @[PRNG.scala 215:21]
            ansReg[0] <= _T_33 @[PRNG.scala 215:16]
            node _T_34 = gt(ansReg[1], UInt<4>("h9")) @[PRNG.scala 216:31]
            node _T_35 = sub(ansReg[1], UInt<4>("ha")) @[PRNG.scala 216:45]
            node _T_36 = tail(_T_35, 1) @[PRNG.scala 216:45]
            node _T_37 = mux(_T_34, _T_36, ansReg[1]) @[PRNG.scala 216:21]
            ansReg[1] <= _T_37 @[PRNG.scala 216:16]
            node _T_38 = gt(ansReg[2], UInt<4>("h9")) @[PRNG.scala 217:31]
            node _T_39 = sub(ansReg[2], UInt<4>("ha")) @[PRNG.scala 217:45]
            node _T_40 = tail(_T_39, 1) @[PRNG.scala 217:45]
            node _T_41 = mux(_T_38, _T_40, ansReg[2]) @[PRNG.scala 217:21]
            ansReg[2] <= _T_41 @[PRNG.scala 217:16]
            node _T_42 = gt(ansReg[3], UInt<4>("h9")) @[PRNG.scala 218:31]
            node _T_43 = sub(ansReg[3], UInt<4>("ha")) @[PRNG.scala 218:45]
            node _T_44 = tail(_T_43, 1) @[PRNG.scala 218:45]
            node _T_45 = mux(_T_42, _T_44, ansReg[3]) @[PRNG.scala 218:21]
            ansReg[3] <= _T_45 @[PRNG.scala 218:16]
            reg REG_1 : UInt<1>, clock with :
              reset => (UInt<1>("h0"), REG_1) @[PRNG.scala 219:32]
            REG_1 <= UInt<1>("h1") @[PRNG.scala 219:32]
            goToCheckDupeReg <= REG_1 @[PRNG.scala 219:23]
          else :
            node _T_46 = eq(state, UInt<3>("h3")) @[PRNG.scala 222:20]
            when _T_46 : @[PRNG.scala 222:34]
              goToCheckDupeReg <= UInt<1>("h0") @[PRNG.scala 223:23]
              node _T_47 = eq(ansReg[0], ansReg[1]) @[PRNG.scala 224:33]
              node _T_48 = mux(_T_47, UInt<1>("h1"), UInt<1>("h0")) @[PRNG.scala 224:23]
              dupeReg[0] <= _T_48 @[PRNG.scala 224:17]
              node _T_49 = eq(ansReg[0], ansReg[2]) @[PRNG.scala 225:33]
              node _T_50 = mux(_T_49, UInt<1>("h1"), UInt<1>("h0")) @[PRNG.scala 225:23]
              dupeReg[1] <= _T_50 @[PRNG.scala 225:17]
              node _T_51 = eq(ansReg[0], ansReg[3]) @[PRNG.scala 226:33]
              node _T_52 = mux(_T_51, UInt<1>("h1"), UInt<1>("h0")) @[PRNG.scala 226:23]
              dupeReg[2] <= _T_52 @[PRNG.scala 226:17]
              node _T_53 = eq(ansReg[1], ansReg[2]) @[PRNG.scala 227:33]
              node _T_54 = mux(_T_53, UInt<1>("h1"), UInt<1>("h0")) @[PRNG.scala 227:23]
              dupeReg[3] <= _T_54 @[PRNG.scala 227:17]
              node _T_55 = eq(ansReg[1], ansReg[3]) @[PRNG.scala 228:33]
              node _T_56 = mux(_T_55, UInt<1>("h1"), UInt<1>("h0")) @[PRNG.scala 228:23]
              dupeReg[4] <= _T_56 @[PRNG.scala 228:17]
              node _T_57 = eq(ansReg[2], ansReg[3]) @[PRNG.scala 229:33]
              node _T_58 = mux(_T_57, UInt<1>("h1"), UInt<1>("h0")) @[PRNG.scala 229:23]
              dupeReg[5] <= _T_58 @[PRNG.scala 229:17]
              reg REG_2 : UInt<1>, clock with :
                reset => (UInt<1>("h0"), REG_2) @[PRNG.scala 230:33]
              REG_2 <= UInt<1>("h1") @[PRNG.scala 230:33]
              goToVerifyDupeReg <= REG_2 @[PRNG.scala 230:24]
            else :
              node _T_59 = eq(state, UInt<3>("h4")) @[PRNG.scala 232:20]
              when _T_59 : @[PRNG.scala 232:35]
                goToVerifyDupeReg <= UInt<1>("h0") @[PRNG.scala 234:24]
                node _T_60 = or(dupeReg[0], dupeReg[1]) @[PRNG.scala 235:42]
                node _T_61 = or(_T_60, dupeReg[2]) @[PRNG.scala 235:54]
                node _T_62 = or(_T_61, dupeReg[3]) @[PRNG.scala 235:66]
                node _T_63 = or(_T_62, dupeReg[4]) @[PRNG.scala 235:78]
                node _T_64 = or(_T_63, dupeReg[5]) @[PRNG.scala 235:90]
                node _T_65 = eq(_T_64, UInt<1>("h1")) @[PRNG.scala 235:103]
                node _T_66 = mux(_T_65, UInt<1>("h1"), UInt<1>("h0")) @[PRNG.scala 235:30]
                reg REG_3 : UInt<1>, clock with :
                  reset => (UInt<1>("h0"), REG_3) @[PRNG.scala 235:26]
                REG_3 <= _T_66 @[PRNG.scala 235:26]
                reGenReg <= REG_3 @[PRNG.scala 235:16]
                node _T_67 = or(dupeReg[0], dupeReg[1]) @[PRNG.scala 236:46]
                node _T_68 = or(_T_67, dupeReg[2]) @[PRNG.scala 236:58]
                node _T_69 = or(_T_68, dupeReg[3]) @[PRNG.scala 236:70]
                node _T_70 = or(_T_69, dupeReg[4]) @[PRNG.scala 236:82]
                node _T_71 = or(_T_70, dupeReg[5]) @[PRNG.scala 236:94]
                node _T_72 = eq(_T_71, UInt<1>("h0")) @[PRNG.scala 236:107]
                node _T_73 = mux(_T_72, UInt<1>("h1"), UInt<1>("h0")) @[PRNG.scala 236:34]
                reg REG_4 : UInt<1>, clock with :
                  reset => (UInt<1>("h0"), REG_4) @[PRNG.scala 236:30]
                REG_4 <= _T_73 @[PRNG.scala 236:30]
                outputAnsReg <= REG_4 @[PRNG.scala 236:20]
              else :
                node _T_74 = eq(state, UInt<3>("h6")) @[PRNG.scala 238:20]
                when _T_74 : @[PRNG.scala 238:31]
                  outputAnsReg <= UInt<1>("h0") @[PRNG.scala 239:20]
                  reGenReg <= UInt<1>("h0") @[PRNG.scala 240:16]
                  io.puzzle[0] <= ansReg[0] @[PRNG.scala 241:19]
                  io.puzzle[1] <= ansReg[1] @[PRNG.scala 242:19]
                  io.puzzle[2] <= ansReg[2] @[PRNG.scala 243:19]
                  io.puzzle[3] <= ansReg[3] @[PRNG.scala 244:19]
                  reg REG_5 : UInt<1>, clock with :
                    reset => (UInt<1>("h0"), REG_5) @[PRNG.scala 246:24]
                  REG_5 <= UInt<1>("h1") @[PRNG.scala 246:24]
                  io.ready <= REG_5 @[PRNG.scala 246:15]

