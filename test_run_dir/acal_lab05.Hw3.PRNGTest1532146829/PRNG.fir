circuit PRNG :
  module PRNG :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip gen : UInt<1>, puzzle : UInt<4>[4], ready : UInt<1>}

    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[PRNG.scala 15:24]
    wire _WIRE : UInt<1>[16] @[PRNG.scala 17:35]
    _WIRE[0] <= UInt<1>("h1") @[PRNG.scala 17:35]
    _WIRE[1] <= UInt<1>("h1") @[PRNG.scala 17:35]
    _WIRE[2] <= UInt<1>("h1") @[PRNG.scala 17:35]
    _WIRE[3] <= UInt<1>("h1") @[PRNG.scala 17:35]
    _WIRE[4] <= UInt<1>("h1") @[PRNG.scala 17:35]
    _WIRE[5] <= UInt<1>("h1") @[PRNG.scala 17:35]
    _WIRE[6] <= UInt<1>("h1") @[PRNG.scala 17:35]
    _WIRE[7] <= UInt<1>("h1") @[PRNG.scala 17:35]
    _WIRE[8] <= UInt<1>("h1") @[PRNG.scala 17:35]
    _WIRE[9] <= UInt<1>("h1") @[PRNG.scala 17:35]
    _WIRE[10] <= UInt<1>("h1") @[PRNG.scala 17:35]
    _WIRE[11] <= UInt<1>("h1") @[PRNG.scala 17:35]
    _WIRE[12] <= UInt<1>("h1") @[PRNG.scala 17:35]
    _WIRE[13] <= UInt<1>("h1") @[PRNG.scala 17:35]
    _WIRE[14] <= UInt<1>("h1") @[PRNG.scala 17:35]
    _WIRE[15] <= UInt<1>("h1") @[PRNG.scala 17:35]
    reg shiftReg : UInt<1>[16], clock with :
      reset => (reset, _WIRE) @[PRNG.scala 17:27]
    wire _WIRE_1 : UInt<4>[4] @[PRNG.scala 18:33]
    _WIRE_1[0] <= UInt<4>("h0") @[PRNG.scala 18:33]
    _WIRE_1[1] <= UInt<4>("h0") @[PRNG.scala 18:33]
    _WIRE_1[2] <= UInt<4>("h0") @[PRNG.scala 18:33]
    _WIRE_1[3] <= UInt<4>("h0") @[PRNG.scala 18:33]
    reg regAns : UInt<4>[4], clock with :
      reset => (reset, _WIRE_1) @[PRNG.scala 18:25]
    wire _WIRE_2 : UInt<1>[6] @[PRNG.scala 19:33]
    _WIRE_2[0] <= UInt<1>("h1") @[PRNG.scala 19:33]
    _WIRE_2[1] <= UInt<1>("h1") @[PRNG.scala 19:33]
    _WIRE_2[2] <= UInt<1>("h1") @[PRNG.scala 19:33]
    _WIRE_2[3] <= UInt<1>("h1") @[PRNG.scala 19:33]
    _WIRE_2[4] <= UInt<1>("h1") @[PRNG.scala 19:33]
    _WIRE_2[5] <= UInt<1>("h1") @[PRNG.scala 19:33]
    reg regDup : UInt<1>[6], clock with :
      reset => (reset, _WIRE_2) @[PRNG.scala 19:25]
    reg goToRangeMap : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[PRNG.scala 20:31]
    reg goToCheckDup : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[PRNG.scala 21:31]
    reg goToValidateDup : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[PRNG.scala 22:34]
    reg goToOutput : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[PRNG.scala 23:29]
    reg goToReGen : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[PRNG.scala 24:28]
    node _T = eq(UInt<3>("h0"), state) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      state <= UInt<3>("h1") @[PRNG.scala 28:26]
    else :
      node _T_1 = eq(UInt<3>("h1"), state) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        state <= UInt<3>("h5") @[PRNG.scala 29:26]
      else :
        node _T_2 = eq(UInt<3>("h5"), state) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          node _T_3 = eq(goToRangeMap, UInt<1>("h1")) @[PRNG.scala 30:38]
          when _T_3 : @[PRNG.scala 30:49]
            state <= UInt<3>("h2") @[PRNG.scala 30:57]
        else :
          node _T_4 = eq(UInt<3>("h2"), state) @[Conditional.scala 37:30]
          when _T_4 : @[Conditional.scala 39:67]
            node _T_5 = eq(goToCheckDup, UInt<1>("h1")) @[PRNG.scala 31:43]
            when _T_5 : @[PRNG.scala 31:54]
              state <= UInt<3>("h3") @[PRNG.scala 31:62]
          else :
            node _T_6 = eq(UInt<3>("h3"), state) @[Conditional.scala 37:30]
            when _T_6 : @[Conditional.scala 39:67]
              node _T_7 = eq(goToValidateDup, UInt<1>("h1")) @[PRNG.scala 32:45]
              when _T_7 : @[PRNG.scala 32:56]
                state <= UInt<3>("h4") @[PRNG.scala 32:64]
            else :
              node _T_8 = eq(UInt<3>("h4"), state) @[Conditional.scala 37:30]
              when _T_8 : @[Conditional.scala 39:67]
                node _T_9 = eq(goToReGen, UInt<1>("h1")) @[PRNG.scala 34:28]
                when _T_9 : @[PRNG.scala 34:39]
                  state <= UInt<3>("h1") @[PRNG.scala 34:47]
                else :
                  node _T_10 = eq(goToOutput, UInt<1>("h1")) @[PRNG.scala 35:34]
                  when _T_10 : @[PRNG.scala 35:45]
                    state <= UInt<3>("h6") @[PRNG.scala 35:53]
              else :
                node _T_11 = eq(UInt<3>("h6"), state) @[Conditional.scala 37:30]
                when _T_11 : @[Conditional.scala 39:67]
                  node _T_12 = eq(io.gen, UInt<1>("h1")) @[PRNG.scala 38:25]
                  when _T_12 : @[PRNG.scala 38:36]
                    state <= UInt<3>("h0") @[PRNG.scala 38:44]
    io.ready <= UInt<1>("h0") @[PRNG.scala 43:14]
    wire _WIRE_3 : UInt<4>[4] @[PRNG.scala 44:25]
    _WIRE_3[0] <= UInt<4>("h0") @[PRNG.scala 44:25]
    _WIRE_3[1] <= UInt<4>("h0") @[PRNG.scala 44:25]
    _WIRE_3[2] <= UInt<4>("h0") @[PRNG.scala 44:25]
    _WIRE_3[3] <= UInt<4>("h0") @[PRNG.scala 44:25]
    io.puzzle[0] <= _WIRE_3[0] @[PRNG.scala 44:15]
    io.puzzle[1] <= _WIRE_3[1] @[PRNG.scala 44:15]
    io.puzzle[2] <= _WIRE_3[2] @[PRNG.scala 44:15]
    io.puzzle[3] <= _WIRE_3[3] @[PRNG.scala 44:15]
    node _T_13 = eq(state, UInt<3>("h0")) @[PRNG.scala 47:16]
    when _T_13 : @[PRNG.scala 47:26]
      node _T_14 = eq(io.ready, UInt<1>("h0")) @[PRNG.scala 48:18]
    node _T_15 = eq(state, UInt<3>("h1")) @[PRNG.scala 50:16]
    when _T_15 : @[PRNG.scala 50:26]
      goToReGen <= UInt<1>("h0") @[PRNG.scala 51:19]
      goToOutput <= UInt<1>("h0") @[PRNG.scala 52:20]
      shiftReg[0] <= shiftReg[1] @[PRNG.scala 53:54]
      shiftReg[1] <= shiftReg[2] @[PRNG.scala 53:54]
      shiftReg[2] <= shiftReg[3] @[PRNG.scala 53:54]
      shiftReg[3] <= shiftReg[4] @[PRNG.scala 53:54]
      shiftReg[4] <= shiftReg[5] @[PRNG.scala 53:54]
      shiftReg[5] <= shiftReg[6] @[PRNG.scala 53:54]
      shiftReg[6] <= shiftReg[7] @[PRNG.scala 53:54]
      shiftReg[7] <= shiftReg[8] @[PRNG.scala 53:54]
      shiftReg[8] <= shiftReg[9] @[PRNG.scala 53:54]
      shiftReg[9] <= shiftReg[10] @[PRNG.scala 53:54]
      shiftReg[10] <= shiftReg[11] @[PRNG.scala 53:54]
      shiftReg[11] <= shiftReg[12] @[PRNG.scala 53:54]
      shiftReg[12] <= shiftReg[13] @[PRNG.scala 53:54]
      shiftReg[13] <= shiftReg[14] @[PRNG.scala 53:54]
      shiftReg[14] <= shiftReg[15] @[PRNG.scala 53:54]
      shiftReg[15] <= shiftReg[0] @[PRNG.scala 53:54]
      node _T_16 = xor(shiftReg[0], shiftReg[2]) @[PRNG.scala 54:38]
      node _T_17 = xor(_T_16, shiftReg[3]) @[PRNG.scala 54:51]
      node _T_18 = xor(_T_17, shiftReg[5]) @[PRNG.scala 54:64]
      shiftReg[15] <= _T_18 @[PRNG.scala 54:22]
    node _T_19 = eq(state, UInt<3>("h5")) @[PRNG.scala 56:16]
    when _T_19 : @[PRNG.scala 56:25]
      node lo = cat(shiftReg[1], shiftReg[0]) @[Cat.scala 30:58]
      node hi = cat(shiftReg[3], shiftReg[2]) @[Cat.scala 30:58]
      node _T_20 = cat(hi, lo) @[Cat.scala 30:58]
      regAns[0] <= _T_20 @[PRNG.scala 57:19]
      node lo_1 = cat(shiftReg[5], shiftReg[4]) @[Cat.scala 30:58]
      node hi_1 = cat(shiftReg[7], shiftReg[6]) @[Cat.scala 30:58]
      node _T_21 = cat(hi_1, lo_1) @[Cat.scala 30:58]
      regAns[1] <= _T_21 @[PRNG.scala 58:19]
      node lo_2 = cat(shiftReg[9], shiftReg[8]) @[Cat.scala 30:58]
      node hi_2 = cat(shiftReg[11], shiftReg[10]) @[Cat.scala 30:58]
      node _T_22 = cat(hi_2, lo_2) @[Cat.scala 30:58]
      regAns[2] <= _T_22 @[PRNG.scala 59:19]
      node lo_3 = cat(shiftReg[13], shiftReg[12]) @[Cat.scala 30:58]
      node hi_3 = cat(shiftReg[15], shiftReg[14]) @[Cat.scala 30:58]
      node _T_23 = cat(hi_3, lo_3) @[Cat.scala 30:58]
      regAns[3] <= _T_23 @[PRNG.scala 60:19]
      reg REG : UInt<1>, clock with :
        reset => (UInt<1>("h0"), REG) @[PRNG.scala 61:32]
      REG <= UInt<1>("h1") @[PRNG.scala 61:32]
      goToRangeMap <= REG @[PRNG.scala 61:22]
    node _T_24 = eq(state, UInt<3>("h2")) @[PRNG.scala 63:16]
    when _T_24 : @[PRNG.scala 63:30]
      goToRangeMap <= UInt<1>("h0") @[PRNG.scala 64:22]
      node _T_25 = gt(regAns[0], UInt<4>("h9")) @[PRNG.scala 65:36]
      node _T_26 = sub(regAns[0], UInt<4>("ha")) @[PRNG.scala 65:53]
      node _T_27 = tail(_T_26, 1) @[PRNG.scala 65:53]
      node _T_28 = mux(_T_25, _T_27, regAns[0]) @[PRNG.scala 65:25]
      regAns[0] <= _T_28 @[PRNG.scala 65:19]
      node _T_29 = gt(regAns[1], UInt<4>("h9")) @[PRNG.scala 66:36]
      node _T_30 = sub(regAns[1], UInt<4>("ha")) @[PRNG.scala 66:53]
      node _T_31 = tail(_T_30, 1) @[PRNG.scala 66:53]
      node _T_32 = mux(_T_29, _T_31, regAns[1]) @[PRNG.scala 66:25]
      regAns[1] <= _T_32 @[PRNG.scala 66:19]
      node _T_33 = gt(regAns[2], UInt<4>("h9")) @[PRNG.scala 67:36]
      node _T_34 = sub(regAns[2], UInt<4>("ha")) @[PRNG.scala 67:53]
      node _T_35 = tail(_T_34, 1) @[PRNG.scala 67:53]
      node _T_36 = mux(_T_33, _T_35, regAns[2]) @[PRNG.scala 67:25]
      regAns[2] <= _T_36 @[PRNG.scala 67:19]
      node _T_37 = gt(regAns[3], UInt<4>("h9")) @[PRNG.scala 68:36]
      node _T_38 = sub(regAns[3], UInt<4>("ha")) @[PRNG.scala 68:53]
      node _T_39 = tail(_T_38, 1) @[PRNG.scala 68:53]
      node _T_40 = mux(_T_37, _T_39, regAns[3]) @[PRNG.scala 68:25]
      regAns[3] <= _T_40 @[PRNG.scala 68:19]
      reg REG_1 : UInt<1>, clock with :
        reset => (UInt<1>("h0"), REG_1) @[PRNG.scala 69:32]
      REG_1 <= UInt<1>("h1") @[PRNG.scala 69:32]
      goToCheckDup <= REG_1 @[PRNG.scala 69:22]
    node _T_41 = eq(state, UInt<3>("h3")) @[PRNG.scala 71:16]
    when _T_41 : @[PRNG.scala 71:30]
      goToCheckDup <= UInt<1>("h0") @[PRNG.scala 72:22]
      node _T_42 = eq(regAns[0], regAns[1]) @[PRNG.scala 74:36]
      node _T_43 = mux(_T_42, UInt<1>("h1"), UInt<1>("h0")) @[PRNG.scala 74:25]
      regDup[0] <= _T_43 @[PRNG.scala 74:19]
      node _T_44 = eq(regAns[0], regAns[2]) @[PRNG.scala 75:36]
      node _T_45 = mux(_T_44, UInt<1>("h1"), UInt<1>("h0")) @[PRNG.scala 75:25]
      regDup[1] <= _T_45 @[PRNG.scala 75:19]
      node _T_46 = eq(regAns[0], regAns[3]) @[PRNG.scala 76:36]
      node _T_47 = mux(_T_46, UInt<1>("h1"), UInt<1>("h0")) @[PRNG.scala 76:25]
      regDup[2] <= _T_47 @[PRNG.scala 76:19]
      node _T_48 = eq(regAns[1], regAns[2]) @[PRNG.scala 77:36]
      node _T_49 = mux(_T_48, UInt<1>("h1"), UInt<1>("h0")) @[PRNG.scala 77:25]
      regDup[3] <= _T_49 @[PRNG.scala 77:19]
      node _T_50 = eq(regAns[1], regAns[3]) @[PRNG.scala 78:36]
      node _T_51 = mux(_T_50, UInt<1>("h1"), UInt<1>("h0")) @[PRNG.scala 78:25]
      regDup[4] <= _T_51 @[PRNG.scala 78:19]
      node _T_52 = eq(regAns[2], regAns[3]) @[PRNG.scala 79:36]
      node _T_53 = mux(_T_52, UInt<1>("h1"), UInt<1>("h0")) @[PRNG.scala 79:25]
      regDup[5] <= _T_53 @[PRNG.scala 79:19]
      reg REG_2 : UInt<1>, clock with :
        reset => (UInt<1>("h0"), REG_2) @[PRNG.scala 80:35]
      REG_2 <= UInt<1>("h1") @[PRNG.scala 80:35]
      goToValidateDup <= REG_2 @[PRNG.scala 80:25]
    node _T_54 = eq(state, UInt<3>("h4")) @[PRNG.scala 82:16]
    when _T_54 : @[PRNG.scala 82:28]
      goToValidateDup <= UInt<1>("h0") @[PRNG.scala 83:25]
      node _T_55 = or(regDup[0], regDup[1]) @[PRNG.scala 84:44]
      node _T_56 = or(_T_55, regDup[2]) @[PRNG.scala 84:55]
      node _T_57 = or(_T_56, regDup[3]) @[PRNG.scala 84:66]
      node _T_58 = or(_T_57, regDup[4]) @[PRNG.scala 84:77]
      node _T_59 = or(_T_58, regDup[5]) @[PRNG.scala 84:88]
      node _T_60 = eq(_T_59, UInt<1>("h1")) @[PRNG.scala 84:100]
      node _T_61 = mux(_T_60, UInt<1>("h1"), UInt<1>("h0")) @[PRNG.scala 84:33]
      reg REG_3 : UInt<1>, clock with :
        reset => (UInt<1>("h0"), REG_3) @[PRNG.scala 84:29]
      REG_3 <= _T_61 @[PRNG.scala 84:29]
      goToReGen <= REG_3 @[PRNG.scala 84:19]
      node _T_62 = or(regDup[0], regDup[1]) @[PRNG.scala 85:45]
      node _T_63 = or(_T_62, regDup[2]) @[PRNG.scala 85:56]
      node _T_64 = or(_T_63, regDup[3]) @[PRNG.scala 85:67]
      node _T_65 = or(_T_64, regDup[4]) @[PRNG.scala 85:78]
      node _T_66 = or(_T_65, regDup[5]) @[PRNG.scala 85:89]
      node _T_67 = eq(_T_66, UInt<1>("h0")) @[PRNG.scala 85:101]
      node _T_68 = mux(_T_67, UInt<1>("h1"), UInt<1>("h0")) @[PRNG.scala 85:34]
      reg REG_4 : UInt<1>, clock with :
        reset => (UInt<1>("h0"), REG_4) @[PRNG.scala 85:30]
      REG_4 <= _T_68 @[PRNG.scala 85:30]
      goToOutput <= REG_4 @[PRNG.scala 85:20]
    node _T_69 = eq(state, UInt<3>("h6")) @[PRNG.scala 87:16]
    when _T_69 : @[PRNG.scala 87:28]
      goToOutput <= UInt<1>("h0") @[PRNG.scala 88:20]
      goToReGen <= UInt<1>("h0") @[PRNG.scala 89:19]
      io.puzzle[0] <= regAns[0] @[PRNG.scala 90:22]
      io.puzzle[1] <= regAns[1] @[PRNG.scala 91:22]
      io.puzzle[2] <= regAns[2] @[PRNG.scala 92:22]
      io.puzzle[3] <= regAns[3] @[PRNG.scala 93:22]
      reg REG_5 : UInt<1>, clock with :
        reset => (UInt<1>("h0"), REG_5) @[PRNG.scala 94:28]
      REG_5 <= UInt<1>("h1") @[PRNG.scala 94:28]
      io.ready <= REG_5 @[PRNG.scala 94:18]

